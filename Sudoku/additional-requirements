========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================

1. You need to change the look of the game 
   so that the grid would not take up the whole screen of the window, 
   but there would be margin space from all sides vertically and horizontally.
   Also change any other parts affected by this, 
   so that the game would still be functional and displayed properly.

### РЕШЕНИЕ ###
[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
=>MARGIN = 20
# CELL_SIZE = WINDOW_SIZE // 
[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
=>CELL_SIZE = (WINDOW_SIZE - 2 * MARGIN) // GRID_SIZE
[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
# rect = pygame.Rect(col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE) 
=>rect = pygame.Rect(MARGIN + col * CELL_SIZE, MARGIN + row * CELL_SIZE, CELL_SIZE, CELL_SIZE)
[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]

========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================

2. You need to change (fix) the part 
   where it is being checked whether the grid is fully and correctly completed.
   Additionally if it is, 
   instead of printing the standard output, 
   you should display that on the screen above the grid.

### РЕШЕНИЕ ###
[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
# def is_solved(grid):
#     for row in range(GRID_SIZE):
#         for col in range(GRID_SIZE):
#             if grid[row][col] == 0 or not is_valid_move(grid, row, col, grid[row][col]):
#                 print("Invalid move at", row, col)
#                 return False
#     return True
=>def is_solved(grid):
     for row in range(GRID_SIZE):
         for col in range(GRID_SIZE):
             if grid[row][col] == 0:
                 return False
             if grid[row].count(grid[row][col]) > 1:
                 return False
             column = [grid[r][col] for r in range(GRID_SIZE)]
             if column.count(grid[row][col]) > 1:
                 return False

     return True
[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
=>solved_message = None
[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
=>if solved_message:
     text_surface = FONT.render(solved_message, True, TEXT_COLOR)
     text_rect = text_surface.get_rect(center=
     (WINDOW_SIZE // 2, MARGIN // 2))
     DISPLAYSURF.blit(text_surface, text_rect)
[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
# elif event.key == K_RETURN and is_solved(grid):  # Ако е решено
#   print("Sudoku Solved!")
=>elif event.key == K_RETURN:  # If the user presses Enter
     if is_solved(grid):  # Check if Sudoku is solved
         solved_message = "Sudoku Solved!"  # Display success message
     else:
         solved_message = None  # Clear message if the grid is not solved
[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]

========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================

3. You need to draw the lines
   between sub-grids with thicker lines.

### РЕШЕНИЕ ###
[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
=>subgrid_size = int(GRID_SIZE ** 0.5)
  for row in range(1, GRID_SIZE):
      if row % subgrid_size == 0:
           pygame.draw.line(DISPLAYSURF, GRID_COLOR, # width
                          (MARGIN, MARGIN + row * CELL_SIZE),
                          (MARGIN + GRID_SIZE * CELL_SIZE, MARGIN + row * CELL_SIZE), width=4)
          pygame.draw.line(DISPLAYSURF, GRID_COLOR, # height
                          (MARGIN + row * CELL_SIZE, MARGIN),
                          (MARGIN + row * CELL_SIZE, MARGIN + GRID_SIZE * CELL_SIZE), width=8)
[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]

========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================

4. When the user 
   tries to make a move that is not valid, 
   display some message on the screen 
   somewhere above the grid.

### РЕШЕНИЕ ###
[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
=>ERROR_COLOR = (255, 0, 0)
[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
# def draw_grid(grid, selected=None): 
=>def draw_grid(grid, selected=None, error_message=None): 
[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
=>if error_message:
     text_surface = FONT.render(error_message, True, ERROR_COLOR)
     text_rect = text_surface.get_rect(center=(WINDOW_SIZE // 2, MARGIN // 2))
     DISPLAYSURF.blit(text_surface, text_rect)
[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
=>invalid_move_message = None
[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
# draw_grid(grid, selected) 
=>draw_grid(grid, selected, invalid_move_message)
[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
# elif K_1 <= event.key <= K_9:  # Ако притисне бројка 1-9
#    num = event.key - K_0
#    if is_valid_move(grid, row, col, num):  # Проверка дали потегот е валиден
#        grid[row][col] = num
=>elif K_1 <= event.key <= K_9:  # Ако притисне бројка 1-9
     num = event.key - K_0
     if is_valid_move(grid, row, col, num):  # Проверка дали потегот е валиден
         grid[row][col] = num
         invalid_move_message = None # 4.If the move is valid, delete message
     else:
         invalid_move_message = "Invalid Move!" # 4.Set invalid move 
[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]

========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================

### ПРАШАЊА ###

# 1. Во моменталната имплементација, почетната состојба на sudoku е:
     A) празна
     B) случајно генерирана
     C) секогаш иста CORRECT
     D) целосно потполнета
# 2. Кој тип на настан се користи за селектирање на поле во табелата?
     -MOUSEBUTTONDOWN
# 3. Доколку GRID_SIZE беше 9, SUB-GRID_SIZE ќе беше?
     -3
# 4. Моменталната проверка за дали може да се внесе некој број, не соодвествува со моменталната димензија.
     -точно, не соодвествува бидејќи бројот може да не биде во опсег од 1 до 4 прилагоден за мрежата 4x4, може да биде било кој број над 4
     -точно, не соодвествува бидејќи кодот не прилагоден внесување број за мрежа со GRID_SIZE=4 односно мрежа 4x4, туку за мрежа 9x9